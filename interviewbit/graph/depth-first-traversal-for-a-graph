recursive
void dfss(vector<int> g[], int N, int s, vector<int> &ans, bool visited[]){
    if(!visited[s]){
        ans.push_back(s);
        visited[s] = 1;
    }
    
    for(int i=0; i<g[s].size(); i++){
        if(!visited[g[s][i]]){
            dfss(g, N, g[s][i], ans, visited);
        }
    }
}
vector <int> dfs(vector<int> g[], int N)
{
    vector<int> ans;
    bool visited[N];
    for(int i=0; i<N; i++)
        visited[i] = 0;
    dfss(g, N, 0, ans, visited);
    return ans;
}

iterative
vector <int> dfs(vector<int> g[], int N)
{
    vector<int> ans;
    bool visited[N];
    for(int i=0; i<N; i++)
        visited[i] = 0;
    stack<int> s;
    s.push(0);
    while(!s.empty()){
        int c = s.top();
        s.pop();
        if(visited[c])
            continue;
        visited[c] = 1;
        ans.push_back(c);
        for(int i=g[c].size()-1; i>=0; i--){
            s.push(g[c][i]);
        }
    }
    return ans;
}
