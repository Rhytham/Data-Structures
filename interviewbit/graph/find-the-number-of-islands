int dfs(int i, int j, int N, int M, vector<int> A[], vector<vector<bool> > &visited){
    visited[i][j] = 1;
    if(i-1 >= 0 && A[i-1][j] == 1 && visited[i-1][j] == 0){
        dfs(i-1, j, N, M, A, visited);
    }
    if(i+1 < N && A[i+1][j] == 1 && visited[i+1][j] == 0){
        dfs(i+1, j, N, M, A, visited);
    }
    if(j-1 >= 0 && A[i][j-1] == 1 && visited[i][j-1] == 0){
        dfs(i, j-1, N, M, A, visited);
    }
    if(j+1 < M && A[i][j+1] == 1 && visited[i][j+1] == 0){
        dfs(i, j+1, N, M, A, visited);
    }
    if(i-1 >= 0 && j-1 >= 0 && A[i-1][j-1] == 1 && visited[i-1][j-1] == 0){
        dfs(i-1, j-1, N, M, A, visited);
    }
    if(i+1 < N && j+1 < M && A[i+1][j+1] == 1 && visited[i+1][j+1] == 0){
        dfs(i+1, j+1, N, M, A, visited);
    }
    if(i-1 >= 0 && j+1 < M && A[i-1][j+1] == 1 && visited[i-1][j+1] == 0){
        dfs(i-1, j+1, N, M, A, visited);
    }
    if(i+1 < N && j-1 >= 0 && A[i+1][j-1] == 1 && visited[i+1][j-1] == 0){
        dfs(i+1, j-1, N, M, A, visited);
    }
}

int findIslands(vector<int> A[], int N, int M) {
    // Your code here
    vector<vector<bool> > visited(N, vector<bool>(M, 0));
    int ans = 0;
    for(int i=0; i<N; i++){
        for(int j=0; j<M; j++){
            if(!visited[i][j] && A[i][j] == 1){
                dfs(i, j, N, M, A, visited);
                ans++;
            }
        }
    }
    return ans;
}
