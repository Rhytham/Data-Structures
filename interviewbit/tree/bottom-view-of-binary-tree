/* Tree node class

struct Node
{
    int data; //data of the node
    Node *left, *right; //left and right references

    // Constructor of tree node
    Node(int key)
    {
        data = key;
        left = right = NULL;
    }
}; */

// Method that returns the bottom view.
vector <int> bottomView(Node *root)
{   
    queue<pair<Node*, int> > q;
    q.push({root, 0});
    map<int, Node*> m;
    m[0] = root;
    while(!q.empty()){
        pair<Node*, int> p = q.front();
        q.pop();
        Node* node = p.first;
        int dist = p.second;
        if(node->left){
            q.push({node->left, dist-1});
            m[dist-1] = node->left;
        }
        if(node->right){
            q.push({node->right, dist+1});
            m[dist+1] = node->right;
        }
    }
    vector<int> v;
    for(pair<int,Node*> p : m){
        v.push_back(p.second->data);
    }
    return v;
}

