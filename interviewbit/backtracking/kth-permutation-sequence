int fact(int n){
    if(n>12){
        return INT_MAX;
    }
    int ans=1;
    for(int i=2; i<=n; i++){
        ans *= i;
    }
    return ans;
}

string do_permute(int n, int k, vector<int> &digits, string &ans){
    if(n==1){
        ans += to_string(digits[0]);
        return ans;
    }
    int f = fact(n-1);
    int index = k/f;
    if(k%f == 0)
        index -= 1;
    ans += to_string(digits[index]);
    digits.erase(digits.begin()+index);
    
    k -= index*f;
    return do_permute(n-1, k, digits, ans);
}

string Solution::getPermutation(int A, int B) {
    string ans="";
    vector<int> digits(A);
    for(int i=1; i<=A; i++)
        digits[i-1]=i;
    return do_permute(A, B, digits, ans);
}
