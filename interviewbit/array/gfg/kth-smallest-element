#include <iostream>
using namespace std;
int randomPartition(int arr[], int l, int r); 

int kth(int arr[], int l, int r, int k) 
{  
        int pos = randomPartition(arr, l, r); 
  
        // If position is same as k 
        if (pos == k-1) 
            return arr[pos]; 
        if (pos > k-1)  // If position is more, recur for left subarray 
            return kth(arr, l, pos-1, k); 
  
        // Else recur for right subarray 
        return kth(arr, pos+1, r, k); 
} 
  
void swap(int *a, int *b) 
{ 
    int temp = *a; 
    *a = *b; 
    *b = temp; 
} 
int randomPartition(int arr[], int l, int r) 
{ 
    int n = r-l+1; 
    int pivot = rand() % n; 
    pivot = pivot+l;
    swap(&arr[pivot], &arr[r]); 
    int i = l-1; 
    for (int j = l; j <= r - 1; j++) 
    { 
        if (arr[j] < arr[r]){   
            i++;
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i+1], &arr[r]); 
    return i+1; 
}
int main() {
	int test;
	cin>>test;
	for(int t=0; t<test; t++){
	    int n;
	    cin>>n;
	    int A[n];
	    for(int i=0; i<n; i++)
	        cin>>A[i];
	    int k;
	    cin>>k;
	   cout<<kth(A,0,n-1,k)<<endl;
	}
	return 0;
}
