void merge(vector<int> &A, int l, int r){
    int mid=(l+r)/2;
    int n1=(mid-l+1);
    int n2=(r-mid);
    int a1[n1], a2[n2];
    for(int i=0;i<n1;i++){
        a1[i]=A[i+l];
    }
    for(int i=0;i<n2;i++){
        a2[i]=A[i+mid+1];
    }
    
    int i=0, j=0, k=l;
    while(i<n1 && j<n2){
        if(a1[i]<a2[j]){
            A[k++]=a1[i++];
        }else{
            A[k++]=a2[j++];
        }
    }
    
    while(i<n1){
        A[k++]=a1[i++];
    }
    while(j<n2){
        A[k++]=a2[j++];
    }
}

void mergesort(vector<int> &A, int l, int r){
    if(l>=r){
        return;
    }
    
    int mid=(l+r)/2;
    
    mergesort(A, l, mid);
    mergesort(A, mid+1, r);
    merge(A, l, r);
}

vector<int> Solution::wave(vector<int> &A) {
    int n=A.size();
    vector<int> v;
    mergesort(A, 0, n-1);
    for(int i=0;i<(n-1);i+=2){
        v.push_back(A[i+1]);
        v.push_back(A[i]);
    }
    if(v.size()<n){
        v.push_back(A[n-1]);
    }
    return v;
}
