 int numIslands(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        if(m == 0 || n==0)
            return 0;
        vector<vector<bool> > visited(m, vector<bool>(n, 0));
        int ans = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(visited[i][j] == 1 || grid[i][j] == '0')
                    continue;
                queue<pair<int, int> > q;
                q.push({i,j});
                visited[i][j] = 1;
                while(!q.empty()){
                    pair<int, int> p = q.front();
                    q.pop();
                    if(p.first+1 < m && visited[p.first+1][p.second]==0 && grid[p.first+1][p.second]=='1'){
                        q.push({p.first+1, p.second});
                        visited[p.first+1][p.second] = 1;
                    }
                    if(p.first-1 >= 0 && visited[p.first-1][p.second]==0 && grid[p.first-1][p.second]=='1'){
                        q.push({p.first-1, p.second});
                        visited[p.first-1][p.second] = 1;
                    }
                    if(p.second+1 < n && visited[p.first][p.second+1]==0 && grid[p.first][p.second+1]=='1'){
                        q.push({p.first, p.second+1});
                        visited[p.first][p.second+1] = 1;
                    }
                    if(p.second-1 >= 0 && visited[p.first][p.second-1]==0 && grid[p.first][p.second-1]=='1'){
                        q.push({p.first, p.second-1});
                        visited[p.first][p.second-1] = 1;
                    }
                }
                ans += 1;
            }
        }
        return ans;
    }
