class Solution {
public:
    int countneighbors(vector<vector<int>>& board, int m, int n, int i, int j){
        int count = 0;
        if(i+1<m && (board[i+1][j] == 1 || board[i+1][j] == 2))
            count++;
        if(i-1>=0 && (board[i-1][j] == 1 || board[i-1][j] == 2))
            count++;
        if(j+1<n && (board[i][j+1] == 1 || board[i][j+1] == 2))
            count++;
        if(j-1>=0 && (board[i][j-1] == 1 || board[i][j-1] == 2))
            count++;
        if(i+1<m && j+1<n && (board[i+1][j+1] == 1 || board[i+1][j+1] == 2))
            count++;
        if(i-1>=0 && j-1>=0 && (board[i-1][j-1] == 1 || board[i-1][j-1] == 2))
            count++;
        if(i-1>=0 && j+1<n && (board[i-1][j+1] == 1 || board[i-1][j+1] == 2))
            count++;
        if(i+1<m && j-1>=0 && (board[i+1][j-1] == 1 || board[i+1][j-1] == 2))
            count++;
        return count;
}

    void gameOfLife(vector<vector<int>>& board) {
        if(board.size() == 0)
            return;
            int m = board.size(), n = board[0].size();
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int count = countneighbors(board, m, n, i, j);
                if(board[i][j] == 0){
                    if(count == 3){
                        board[i][j] = 3;
                    }
                }
                else if(board[i][j] == 1){
                    if(count < 2 || count > 3){
                        board[i][j] = 2;
                    }
                }
            }
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j] == 2)
                    board[i][j] = 0;
                else if(board[i][j] == 3)
                    board[i][j] = 1;
            }
        }
      }

};
