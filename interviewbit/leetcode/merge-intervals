class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        for(int i=0; i<intervals.size(); ){
            int mn = intervals[i][0], mx = intervals[i][1], j = i;
            while(i+1<intervals.size() && mx >= intervals[i+1][0]){
                i++;
                mn = min(mn, intervals[i][0]);
                mx = max(mx, intervals[i][1]);
            }
            if(j != i){
                intervals[j] = {mn, mx};
                intervals.erase(intervals.begin()+j+1, intervals.begin()+i+1);
            }
            i=j+1;
        }
        return intervals;

    }
};

class Solution {
public:
    static bool cmp(const vector<int> &a, const vector<int> &b){
        return (a[0]<b[0]);
    }
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end(), cmp);
        int index = 0;
        for(int i=0; i<intervals.size(); ){
            int mn = intervals[i][0], mx = intervals[i][1];
            while(i+1<intervals.size() && mx >= intervals[i+1][0]){
                i++;
                mn = min(mn, intervals[i][0]);
                mx = max(mx, intervals[i][1]);
            }
            intervals[index++] = {mn, mx}; 
            i++;
        }
        intervals.erase(intervals.begin()+index, intervals.end());
        return intervals;
    }
};
