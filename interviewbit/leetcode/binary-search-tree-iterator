/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
	stack<TreeNode*> s;
    BSTIterator(TreeNode* root) {
        	stack<TreeNode*> st;
            s = st;
            TreeNode* node = root;
            while(node){
                s.push(node);
                node = node->left;
            }
    }
    
    int next() {
        TreeNode* node = s.top();
        s.pop();
        TreeNode* node2 = node->right;
        while(node2){
            s.push(node2);
            node2 = node2->left;
        }
        return node->val;
    }
    
    bool hasNext() {
        return s.size()>0;
    }
};


/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
