int nD(string A, int i, int n, vector<int> &mem, bool &z){
    
    if(z)
        return 0;
    if(i>n-1)
        return 1;
    if(A[i]=='0' && (i-1<0 || A[i-1]>'2')){
        z=true;
        return 0;
    } 
    if(A[i]=='0')
        return 0;
    if(i==n-1)
        return 1;
    if(mem[i]!=-1)
        return mem[i];
    
    int l=0,r=0;
    
    if(A[i]>'0')
        l = nD(A,i+1,n,mem,z);
        
    if(A[i]>'0' && (i+1<n) && ((int(A[i])-'0')*10 + (int(A[i+1])-'0'))<=26)
        r = nD(A,i+2,n,mem,z);
    
    if(z)
        return 0;
    mem[i]=l+r;
    return mem[i];    
}

int Solution::numDecodings(string A) {
   if(A.size() == 0){
        return 0;
    }
    
    vector<int> mem(A.size());
    for(int i = 0; i < A.size(); i++){
        mem[i]=-1;
    }
    bool z=false;
    return nD(A, 0, A.size(), mem, z);
}
