class trie{
public:
bool flag;
trie* arr[26];
    trie()
    {
        flag=false;
        for(int i=0;i<26;i++)
           this->arr[i]=NULL;
    }
};
void insert(trie *root,string &s)
{
    for(int i=0;i<s.length();i++)
    {
        if(root->arr[s[i]-'a']==NULL)
           root->arr[s[i]-'a']=new trie();
        root=root->arr[s[i]-'a'];
    }
    root->flag=true;
}
void generate_ans(vector<string> &ans,vector<vector<pair<string,int>>> &dp,vector<string> &cur,int index)
{
    if(index==dp.size())
    {
        string temp;
        for(int i=0;i<cur.size();i++)
           temp=temp+cur[i]+" ";
        temp.pop_back();
        ans.push_back(temp);
        return ;
    }
    for(int i=0;i<dp[index].size();i++)
    {
        cur.push_back(dp[index][i].first);
        generate_ans(ans,dp,cur,dp[index][i].second);
        cur.pop_back();
    }  
}
vector<string> Solution::wordBreak(string A, vector<string> &B) {
    trie *dict=new trie();
    for(int i=0;i<B.size();i++)
       insert(dict,B[i]);
    vector<vector<pair<string,int>>> dp(A.length());
    for(int i=A.length()-1;i>=0;i--)
    {
        trie *root=dict;
        string s="";
        for(int j=i;j<A.length();j++)
        {
            s.push_back(A[j]);
            if(root->arr[A[j]-'a']==NULL)
               break;
            root=root->arr[A[j]-'a'];
            if(root->flag==true && (j+1==A.length() || dp[j+1].size()>0))
                dp[i].push_back({s,j+1});
        }
     }

    vector<string> ans;
    vector<string> cur;
    generate_ans(ans,dp,cur,0);
    return ans;
}
