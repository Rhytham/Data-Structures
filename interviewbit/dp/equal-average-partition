bool possible(int index, int sum, int sz, vector<int> &res, vector<int> &A, vector<vector<vector<bool> > > &dp, int total_size) {
            if (sz == 0) return (sum == 0);
            if (index >= total_size) return false;

            if (dp[index][sum][sz] == false) return false;

            if (sum >= A[index]) {
                res.push_back(A[index]);
                if (possible(index + 1, sum - A[index], sz - 1, res, A, dp, total_size)) return true;
                res.pop_back();
            }
            
            if (possible(index + 1, sum, sz, res, A, dp, total_size)) return true;

            return dp[index][sum][sz] = false;
        }

vector<vector<int> > Solution::avgset(vector<int> &A) {
            sort(A.begin(), A.end());

            int total_sum = 0;
            int total_size = A.size();

            for(int i = 0; i < total_size; ++i)
                total_sum += A[i];
            
            vector<vector<vector<bool> > > dp(A.size(), vector<vector<bool> > (total_sum + 1, vector<bool> (total_size, true)));

            // We need to minimize size_of_set1. So, lets search for the first size_of_set1 which is possible. 
            for (int i = 1; i < total_size; i++) {
                // Sum_of_Set1 has to be an integer
                if ((total_sum * i) % total_size != 0) 
                    continue;
                int Sum_of_Set1 = (total_sum * i) / total_size;
                vector<int> res1;
                if (possible(0, Sum_of_Set1, i, res1, A, dp, total_size)) {

                    // Ok. Lets find out the elements in Vec, not in res, and return the result.
                    int ptr1 = 0, ptr2 = 0;
                    vector<int> res2;
                    while (ptr1 < A.size() || ptr2 < res1.size()) {
                        if (ptr2 < res1.size() && res1[ptr2] == A[ptr1]) {
                            ptr1++;
                            ptr2++;
                            continue;
                        }
                        res2.push_back(A[ptr1]);
                        ptr1++;
                    }

                    vector<vector<int> > ans;
                    ans.push_back(res1);
                    ans.push_back(res2);
                    return ans;
                }
            }
            // Not possible.
            vector<vector<int> > ans;
            return ans;
}
