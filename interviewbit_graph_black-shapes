int Solution::black(vector<string> &A) {
    int visited[A.size()][A[0].length()], ans=0;
    for(int i=0; i<A.size(); i++)
        for(int j=0; j<A[i].length(); j++)
            visited[i][j]=0;
    
    for(int i=0; i<A.size(); i++){
        for(int j=0; j<A[i].length(); j++){
            if(visited[i][j]==1 || A[i][j]=='O')
                continue;
            queue<pair<int,int> > q;
            q.push({i,j});
            visited[i][j]=1;
            while(!q.empty()){
                pair<int,int> qq = q.front();
                vector<int> p={qq.first, qq.second};
                q.pop();
                if(p[0]+1<A.size() && visited[p[0]+1][p[1]]!=1 && A[p[0]+1][p[1]]!='O'){
                    q.push({p[0]+1,p[1]});
                    visited[p[0]+1][p[1]]=1;
                }
                if(p[1]+1<A[i].length() && visited[p[0]][p[1]+1]!=1 && A[p[0]][p[1]+1]!='O'){
                    q.push({p[0],p[1]+1});
                    visited[p[0]][p[1]+1]=1;
                }
                if(p[0]-1>=0 && visited[p[0]-1][p[1]]!=1 && A[p[0]-1][p[1]]!='O'){
                    q.push({p[0]-1,p[1]});
                    visited[p[0]-1][p[1]]=1;
                }
                if(p[1]-1>=0 && visited[p[0]][p[1]-1]!=1 && A[p[0]][p[1]-1]!='O'){
                    q.push({p[0],p[1]-1});
                    visited[p[0]][p[1]-1]=1;
                }
            }
            ans++;
        }
    }
    return ans;
}
