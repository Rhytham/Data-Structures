/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 struct comp{
     bool operator()(ListNode* const &a, ListNode* const &b){
         return a->val > b->val;
     }
 };
 
ListNode* Solution::mergeKLists(vector<ListNode*> &A) {
    int k=A.size(), req=k;
    ListNode* head=NULL, *curr=NULL;
    //vector<ListNode*> ptr(k);
    priority_queue<ListNode*, vector<ListNode*>, comp> p;
    for(int i=0; i<k; i++){
        if(A[i]){
            p.push(A[i]);
        }
    }
    
    while(!p.empty()){
        ListNode* pp=p.top();
        p.pop();
        if(!head){
            head=pp;
            curr=head;
        }
        else{
            curr->next=pp;
            curr=curr->next;
        }
        pp=pp->next;
        if(pp)
            p.push(pp);
    }
    return head;
}
